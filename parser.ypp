%{
    #include <iostream>
    #include "hw3_output.h"
    #include "SymbolTable.h"
    using namespace output;
    int main();
    void yyerror(const char*);
    extern int yylineno;
    extern int yylex();
%}

%token VOID INT BYTE B BOOL TRUE FALSE RETURN IF WHILE BREAK CONTINUE SC
COMMA ID NUM STRING

%right ASSIGN
%left OR
%left AND
%left EQOP
%left RELOP
%left BINOP
%left MULTDIVTOP
%right NOT
%left RPAREN LPAREN LBRACE RBRACE
%right ELSE

%%

Prog:        Funcs               {}
;

Funcs:       /* epsilon */       {}
             | FuncDecl Funcs    {}
;

FuncDecl:    RetType ID LPAREN Formals RPAREN
             {CheckPrevDeclID($2, yylineno);
             InsertFuncSymTab($1->type, $2->id, $4->name_list, $4->type_list);
             OpenNewBlock(false, $1->type);
             InsertParamsToSymTab($4->name_list, $4->type_list, yylineno);}
             LBRACE Statements RBRACE
             {CloseBlock();}
;

RetType:     Type                {$$ = $1;}
             |  VOID             {$$ = std::make_shared<TypeVar>(); $$->type = VOID_EXP;}
;

Formals:     /* epsilon */       {$$ = std::make_shared<TypeVar>();}
             | FormalsList       {$$ = $1;}
;

FormalsList:     FormalDecl          {$$ = std::make_shared<TypeVar>();
                                      $$->name_list = PushBackVar($$->name_list, $1->id);
                                      $$->type_list = PushBackVarType($$->type_list, $1->type);}
                 | FormalDecl COMMA FormalsList  {$$ = $3;
                                                  $$->name_list = PushBackVar($3->name_list, $1->id);
                                                  $$->type_list = PushBackVarType($3->type_list, $1->type);}
;

FormalDecl:      Type ID          {$$ = $2; $$->type = $1->type;}
;

Statements:      Statement           {}
                 | Statements Statement  {}
;

Statement:  LBRACE OPENBLOCK Statements RBRACE    {CloseBlock();}
            | Type ID SC {CheckPrevDeclID($2, yylineno);
                          InsertToSymTable($1, $2, false,yylineno);}
            | Type ID ASSIGN Exp SC  {CheckPrevDeclID($2, yylineno);
                                      CheckAssign($1, $4, yylineno);
                                      InsertToSymTable($1, $2, false,yylineno);}
            | ID ASSIGN Exp SC  {ValidateAssign($1, $3, yylineno);}
            | Call SC           {}
            | RETURN SC         {CheckVoidScope(yylineno);}
            | RETURN Exp SC     {ValidateRetType($2, yylineno);}
            | IF LPAREN CHECKBOOLVALID RPAREN OPENBLOCK Statement CLOSEBLOCK {}
            | IF LPAREN CHECKBOOLVALID RPAREN OPENBLOCK Statement CLOSEBLOCK ELSE OPENBLOCK Statement CLOSEBLOCK {}
            | WHILE LPAREN CHECKBOOLVALID RPAREN WHILEBLOCK OPENBLOCK Statement CLOSEBLOCK WHILEBLOCKCLOSED{}
            | BREAK SC          {CheckWhileScope(yylineno, true);}
            | CONTINUE SC       {CheckWhileScope(yylineno, false);}
;

OPENBLOCK:      /* epsilon */                {OpenNewBlock(false, NONE);}
;

CLOSEBLOCK:     /* epsilon */               {CloseBlock();}
;

CHECKBOOLVALID:     Exp                         {IsBool($1, yylineno);}
;

WHILEBLOCK:     /* epsilon */               {WhileState(true);}
;

WHILEBLOCKCLOSED:   /* epsilon */               {WhileState(false);}
;

Call:   ID LPAREN ExpList RPAREN    {$$ = $3;
                                     CallFunc($1, $3, $$, yylineno);
                                     $$->id = $1->id;}

        | ID LPAREN RPAREN          {$$ = $1;
                                                 CallFunc($1, std::make_shared<TypeVar>(), $$, yylineno);}
;

ExpList: Exp                         {$$ = std::make_shared<TypeVar>();
                                      $$->name_list = PushBackVar($$->name_list, $1->id);
                                      $$->type_list = PushBackVarType($$->type_list, $1->type);}
         | Exp COMMA ExpList         {$$ = $3;
                                              $$->name_list = PushBackVar($3->name_list, $1->id);
                                                 $$->type_list = PushBackVarType($3->type_list, $1->type);}
;

Type:   INT                         {$$ = std::make_shared<TypeVar>();
                                     $$->type = INT_EXP;}
        | BYTE                      {$$ = std::make_shared<TypeVar>();
                                     $$->type = BYTE_EXP;}
        | BOOL                      {$$ = std::make_shared<TypeVar>();
                                                 $$->type = BOOL_EXP;}
;

Exp:    LPAREN Exp RPAREN           {$$ = $2;}
        | Exp BINOP Exp             {$$ = std::make_shared<TypeVar>();
                                    IsNum($1, yylineno);
                                    IsNum($3, yylineno);
                                     $$->type = GetType($1, $3);}
        | Exp MULTDIVTOP Exp        {$$ = std::make_shared<TypeVar>();
                                    IsNum($1, yylineno);
                                    IsNum($3, yylineno);
                                    $$->type = GetType($1, $3);}
        | ID                        {$$ = $1;
                                     VarExistsInScope($$, yylineno);}
        | Call                      {$$ = $1;}
        | NUM                       {$$ = $1; $$->type = INT_EXP;}
        | NUM B                     {$$ = $1; ByteErr($$, yylineno);
                                     $$->type = BYTE_EXP;}
        | STRING                    {$$ = std::make_shared<TypeVar>();
                                     $$->type = STRING_EXP;}
        | TRUE                      {$$ = std::make_shared<TypeVar>();
                                     $$->type = BOOL_EXP;}
        | FALSE                     {$$ = std::make_shared<TypeVar>();
                                     $$->type = BOOL_EXP;}
        | NOT Exp                   {$$ = $2;
                                    IsBool($$, yylineno);}
        | Exp AND Exp               {IsBool($1, yylineno);
                                    IsBool($3, yylineno);
                                     $$ = $1;}
        | Exp OR Exp                {IsBool($1, yylineno);
                                    IsBool($3, yylineno);
                                    $$ = $1;}
        | Exp RELOP Exp             {IsNum($1, yylineno);
                                     IsNum($3, yylineno);
                                     $$ = std::make_shared<TypeVar>();
                                     $$->type = BOOL_EXP;}
        | Exp EQOP Exp              {IsNum($1, yylineno);
                                     IsNum($3, yylineno);
                                     $$ = std::make_shared<TypeVar>();
                                     $$->type = BOOL_EXP;}
        | LPAREN Type RPAREN Exp    {IsNum($2, yylineno);
                                     IsNum($4, yylineno);
                                     $$ = $4; $$->type = $2->type;}
;

%%

void yyerror(const char*){errorSyn(yylineno); exit(1);}

int main() {
    InitializeMainScope();
    yyparse();
    CloseMainScope();
    return 0;
}

